#!/usr/bin/perl -w
#
use Image::BMP;

my $base = shift @ARGV or die "ERROR: bmptoti <basename> <pixels_per_line>\n";
my $pixels_per_line = shift @ARGV or die "ERROR: bmptoti <basename> <pixels_per_line>\n";
my $bits = shift @ARGV || 24;
my $bmp  = $base . ".bmp";
my $img = new Image::BMP(
        file            => $bmp,
        debug           => 1,
        );

my $ti = $base . ".ti";
print "Writing ${ti}...\n";
open( T, ">${ti}" ) or die "ERROR: could not open ${ti} for writing: $!\n";

for my $y ( 0 .. $img->{Height}-1 )
{
    for my $x ( 0 .. $img->{Width}-1 )
    {
        if ( ($x % $pixels_per_line) == 0 ) {
            print T "data    ";
            my $sol = $x == 0;
            my $eol = $x == ($img->{Width}-$pixels_per_line);
            my $sof = $sol && $y == 0;
            my $eof = $eol && $y == ($img->{Height}-1);
            printf T " %01x %01x %01x %01x", $sof, $eof, $sol, $eol;
        }
        my $val = $img->xy( $x, $y );
        if ( $bits == 8 ) {
            $val &= 0xff;
            printf T " %03x", $val;
        } else {
            my $r = ($val >> 16) & 0xff;
            my $g = ($val >>  8) & 0xff;
            my $b = ($val >>  0) & 0xff;
            my $lsb = $r & 1;
            $r = ($r << 2) | ($lsb << 1) | ($lsb << 0);
            $lsb = $g & 1;
            $g = ($g << 2) | ($lsb << 1) | ($lsb << 0);
            $lsb = $b & 1;
            $b = ($b << 2) | ($lsb << 1) | ($lsb << 0);
            printf T " %03x %03x %03x", $r, $g, $b;
        }

        if ( ($x % $pixels_per_line) == ($pixels_per_line-1) ) {
            print T "\n";
        }
    }
}
close( T );
exit 0;
