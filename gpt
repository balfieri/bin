#!/usr/bin/env python3
#
# coding=utf-8
#
import os
import sys
import subprocess

from openai import OpenAI
import whisper

cmd_en = True

def die( msg ):
    print( f'ERROR: {msg}' )
    sys.exit( 1 )

def cmd( c, echo=True, echo_stdout=False, can_die=True ):  
    if echo: print( c )
    if cmd_en:
        info = subprocess.run( c, shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT )
        if echo_stdout: print( info.stdout )
        if can_die and info.returncode != 0: die( f'command failed: {c}' )
        return info.stdout
    else:
        return ''

def file_read( file_name ):
    if not os.path.exists( file_name ): die( f'file not found: {file_name}' )
    with open( file_name ) as my_file:
        data = my_file.read()
    return data

#site             = 'openai'
site             = 'perplexity'
model            = ''
context          = ''
is_multi_line    = False
input_s          = ''
recording_dead_time = 3.0
english_voice    = 'Samantha'
italian_voice    = 'Alice'
french_voice     = 'Thomas'
voice_rate       = 190
is_italian_convo = False

i = 1
while i < len(sys.argv):
    arg = sys.argv[i]
    i += 1
    if   arg == '-s' or arg == '-site':
        site = sys.argv[i]
        i += 1
    elif arg == '-m' or arg == '-model':
        model = sys.argv[i]
        i += 1
    elif arg == '-c':
        context = sys.argv[i]
        i += 1
    elif arg == '-i':
        input_s = ' '.join( sys.argv[i:] )
        i += 1
        break
    elif arg == '-f':
        input_s = file_read( sys.argv[i] )
        i += 1
    elif arg == '-recording_dead_time':
        recording_dead_time = float( sys.argv[i] )
        i += 1
    elif arg == '-english_voice':
        english_voice = sys.argv[i]
        i += 1
    elif arg == '-italian_voice':
        italian_voice = sys.argv[i]
        i += 1
    elif arg == '-french_voice':
        french_voice = sys.argv[i]
        i += 1
    elif arg == '-is_italian_convo':
        is_italian_convo = int( sys.argv[i] )
        i += 1
    elif arg == '-r' or arg == '-voice_rate':
        voice_rate = int( sys.argv[i] )
        i += 1
    else:
        die( f'unknown option: {arg}' )

if site == 'openai':
    client = OpenAI( api_key  = os.getenv( 'OPENAI_API_KEY' ) )
    if model == '': model = 'gpt-4o'
    max_tokens = 2048
elif site == 'perplexity':
    client = OpenAI( api_key  = os.getenv( 'PERPLEXITY_API_KEY' ),
                     base_url = 'https://api.perplexity.ai' )
    if model == '': model = 'sonar-pro'
    max_tokens = 2048
else:
    die( f'unknown site: {site}' )

wmodel = None

def prompt_read( prefix, is_multi_line ):
    prompt = input( prefix )
    if not is_multi_line: return prompt
    while True:
         extra = input( '' )
         if extra == '': return prompt
         prompt += '\n' + extra

def record_audio( always_submit ):
    while True:
        #if is_italian_convo: input( f'Hit return when ready to record: ' )
        print( f'Recording will stop after {recording_dead_time} seconds of silence' )
        audio_file_path = 'gpt_audio.wav'
        cmd( f'rm -f {audio_file_path}', False )
        cmd( f'rec {audio_file_path} silence 1 0.1 3% 1 {recording_dead_time} 3%', False, False )
        print( f'Transcribing text...\n' )
        if not wmodel: wmodel = whisper.load_model( "base" )
        result = wmodel.transcribe( audio_file_path, fp16=False )
        transcribed_text = result['text'] 
        print( f'{transcribed_text}\n' )
        if always_submit: return transcribed_text
        while True:
            resp = input( f'Type r=re-record c=correct s=submit a=abandon: ' )
            if resp == 'r' or resp == 'c' or resp == 's' or resp == 'a': break
        if resp != 'r': break
    if resp == 'c': transcribed_text = f'correggi questo testo: {transcribed_text}'
    if resp == 'a': transcribed_text = ''
    return transcribed_text

def speak_text( text, voice ):
    with open( 'gpt_text.txt', 'w' ) as file:
        file.write( text )
    cmd( f'say -f gpt_text.txt -v {voice} -r {voice_rate}', False, False )

messages=[]
translations_info = {
    'italian_translations':    [ 'Italian'    ],
    'french_translations':     [ 'French'     ],
    'spanish_translations':    [ 'Spanish'    ],
    'portuguese_translations': [ 'Portuguese' ],
    'german_translations':     [ 'German'     ],
    }

if context in translations_info:
    info = translations_info[context]
    Language = info[0]
    context = f'Here are some phrases in either English or {Language}. For each phrase, please output a pair of lines. The first line always shows the English translation. The second line always shows the {Language} translation. Then add a blank line after those two lines. That should be the order regardless of whether the original phrase is in English or {Language}. If you\'d like to list a couple English/{Language} translations, that\'s fine, just separate them with semicolons; And please do not translate anything that I didn\'t ask to be translated - the final number of translations should be equal to the number of lines I gave you. Finally, please do not capitalize words unless they are always capitalized. So to summarize, for each phrase your output should be:\n<English translations separate by semicolons>\n<{Language} translations separated by semicolons\nPlease don\'t add any weird characters before or after each line of your response.\nHere are my phrases. Again only translate these and don\'t add others:\n' 
    is_multi_line = True

elif context != '':
    die( f'unknown context: {context}' )

while True:
    if is_italian_convo:
        prompt = record_audio( True )
        if prompt == '': continue
    else:
        if input_s == '':
            prompt = prompt_read( '', is_multi_line )
        else:
            prompt = input_s
        if context != '':
            prompt = context + '\n' + prompt
            context = ''
        elif prompt == '!v' or prompt == '!V':
            prompt = record_audio( prompt == '!V' )
            if prompt == '': continue # abandoned
        elif prompt == '!e' or prompt == '!i':
            voice = english_voice if prompt == '!e' else italian_voice
            speak_text( messages[-1]['content'], voice )
            continue

    messages.append( {'role': 'user', 'content': prompt} )
    print( '-----------------------------------\n' )

    response = client.chat.completions.create(
        model=model,
        messages=messages,
        max_tokens=max_tokens,
    )
    resp = response.choices[0].message.content
    messages.append( {'role': 'assistant', 'content': resp} )
    print( f'{resp}' )
    if input_s == '': print( '-----------------------------------\n' )
    resp_text = messages[-1]['content']
    if is_italian_convo and len(resp_text) < 500: speak_text( resp_text, italian_voice )

    if input_s != '': break
